import { useEffect, useState } from "react";
import { getFormConfig } from "../../utils/formConfig";
import useAutofill from "../../hooks/useAutofill";
import DynamicForm from "../../components/forms/DynamicForm";
import AccessCard from "../../components/user-system-management/AccessCard";
import { generateUniqueUsername } from "../../utils/userManagementUtils";
import { UserPlus } from "lucide-react";

const UserSystemManagement = () => {
    const config = getFormConfig("userSystemManagement");
    const [userInformation, setUserInformation] = useState({});
    const [user, setUser] = useState(null);

    const userInformationAutocomplete = useAutofill(
        userInformation,
        setUserInformation,
        config
    );

    useEffect(() => {
        if (userInformation.username) {
            const usernameAutoGenerated = generateUniqueUsername(userInformation.username);
            setUserInformation((prevState) => ({
                ...prevState,
                usernameAutoGenerated,
            }));
        }
    }, [userInformation.username]);

    const accessCards = [
        {
            id: 1,
            title: "Create",
            permissions: {
                newCustomer: false,
                newVendorSupplier: false,
                newStaff: false,
                userPrivilege: false,
                itemMaster: false,
                newJournal: false
            }
        },
        {
            id: 2,
            title: "Edit/Delete/Control",
            permissions: {
                invoiceEdit: false,
                editJournalEntry: false,
                purchaseEdit: false,
                editCheques: false,
                changeDate: false,
                stockClear: false
            }
        },
        {
            id: 3,
            title: "Financial",
            permissions: {
                receivable: false,
                journalEntry: false,
                payment: false,
                directCheque: false,
                payReceiveCash: false,
                multipleJEntry: false
            }
        },
        {
            id: 4,
            title: "Control Invoice",
            permissions: {
                salesRepChange: false,
                cardPayment: false,
                invoiceShowHide: false,
                freeIssues: false,
                promotion: false,
                showCost: false
            }
        },
        {
            id: 5,
            title: "Bank/ Chq",
            permissions: {
                chequeDetails: false,
                chequeBook: false
            }
        },
        {
            id: 6,
            title: "Posting From",
            permissions: {
                bill: false,
                delivery: false,
                returnGoods: false,
                purchase: false,
                returnByInvoice: false,
                pos: false
            }
        }
    ];

    const handleAddUser = () => {
        const newUser = {
            ...userInformation,
            id: Date.now(),
        };
        setUser(newUser);
        handleResetForm();
    };

    const handleResetForm = () => {
        setUserInformation({});
    };

    const handleUserPermissionChange = (cardId, updatedPermissions) => {
        const permissions = accessCards.map((card) => {
            if (card.id === cardId) {
                return { ...card, permissions: updatedPermissions };
            }
            return card;
        });
        setUser({ ...user, permissions });
    }

    return (
        <div className="space-y-8">
            <div className="flex flex-col md:flex-row justify-between items-center mb-4">
                <div className="flex flex-col gap-2">
                    <h1 className="text-2xl sm:text-2xl md:text-3xl font-bold text-gray-900 mb-1 sm:mb-1.5">
                        User System Management
                    </h1>
                    <p className="text-gray-600 text-base sm:text-lg">
                        Create Users manage user permissions and access levels.
                    </p>
                </div>
                <div className="flex justify-between items-center gap-4 mt-4 md:mt-0">
                    <p className="text-gray-500">Active Users: <span className="font-semibold text-gray-900">10</span></p>
                    <p className="text-gray-500">Inactive Users: <span className="font-semibold text-gray-900">1</span></p>
                </div>
            </div>

            <div className="flex bg-gray-50 flex-col gap-4 p-6 rounded-2xl">
                <h2 className="font-semibold text-lg text-gray-900">Visit Details</h2>
                <DynamicForm
                    fields={config.fields}
                    values={userInformation}
                    onChange={setUserInformation}
                    onAutocompleteSelect={userInformationAutocomplete.handleAutocompleteSelect}
                />
                <div className="flex flex-col md:flex-row justify-center md:justify-end items-center w-full">
                    <button
                        onClick={handleAddUser}
                        className="w-full justify-center md:w-auto px-5 py-2.5 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 shadow-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500/30 flex items-center cursor-pointer mr-3 sm:mb-3"
                    >
                        <UserPlus className="h-4 w-4 mr-1.5" />
                        Create User
                    </button>
                    <button
                        onClick={handleResetForm}
                        className="w-full justify-center md:w-auto px-5 py-2.5 rounded-lg font-medium text-gray-800 hover:text-red-500 hover:ring-2 hover:ring-red-500/30 shadow-sm transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-500/30 flex items-center cursor-pointer sm:mb-3"
                    >
                        Cancel
                    </button>
                </div>
            </div>

            {!user ? (
                <div className="flex justify-center items-center h-64">
                    <p className="text-gray-500">Create a user to assign permissions.</p>
                </div>
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 2xl:grid-cols-3 gap-4 sm:gap-6 lg:gap-8">
                    {
                        accessCards.map((card) => (
                            <AccessCard key={card.id} card={card} onPermissionUpdate={handleUserPermissionChange} />
                        ))
                    }
                </div>
            )}

        </div>
    );
};

export default UserSystemManagement;
